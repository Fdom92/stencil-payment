/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface WcPayment {
      'abort': () => Promise<void>;
      'details': PaymentDetailsInit;
      'methodData': PaymentMethodData[];
      'options': PaymentOptions;
      'show': () => Promise<PaymentResponse>;
    }
  }


    interface HTMLWcPaymentElement extends StencilComponents.WcPayment, HTMLStencilElement {}

    var HTMLWcPaymentElement: {
      prototype: HTMLWcPaymentElement;
      new (): HTMLWcPaymentElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'wc-payment': JSXElements.WcPaymentAttributes;
    }
  }

  namespace JSXElements {

    export interface WcPaymentAttributes extends HTMLAttributes {
      'details'?: PaymentDetailsInit;
      'methodData'?: PaymentMethodData[];
      'onPaymentFailed'?: (event: CustomEvent<Error>) => void;
      'onPaymentSucceeded'?: (event: CustomEvent<PaymentResponse>) => void;
      'options'?: PaymentOptions;
    }
  }

  interface HTMLElementTagNameMap {
    'wc-payment': HTMLWcPaymentElement
  }

  interface ElementTagNameMap {
    'wc-payment': HTMLWcPaymentElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;